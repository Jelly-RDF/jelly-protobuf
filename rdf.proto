syntax = "proto3";
package pl.ostrzyciel.jelly.core.proto;

// Protocol Buffers Rdf serialization.

// === Rdf Terms ===
message RdfIri {
  // Either of these can be zero if the prefix or the suffix are not used.
  uint32 prefix_id = 1;
  uint32 name_id = 2;
}

message RdfLiteral {
  string lex = 1;
  // TODO: use literalKind.Empty instead of simple=true?
  // Will it be smaller and/or faster?
  oneof literalKind {
    bool simple = 2;
    string langtag = 3;
    uint32 datatype = 4;
  }
}

// TODO: compare size & perf of empty message vs simple value (bool)
message RdfRepeat {
}

message RdfTerm {
  oneof term {
    RdfIri        iri = 1;
    string        bnode = 2;
    RdfLiteral    literal = 3;
    RdfTriple     triple_term = 4;
    RdfRepeat     repeat = 5;
  }
}

message RdfGraph {
  oneof graph {
    RdfIri      iri = 1;
    string      bnode = 2;
    RdfLiteral  literal = 3;
    bool        default_graph = 4;
  }
}

// === Triples, quads, graphs ===
message RdfTriple {
  RdfTerm s = 1;
  RdfTerm p = 2;
  RdfTerm o = 3;
}

message RdfQuad {
  RdfTerm  s = 1;
  RdfTerm  p = 2;
  RdfTerm  o = 3;
  RdfGraph g = 4;
}

// === Lookup tables ===

message RdfNameEntry {
  // 1-based
  uint32 id = 1;
  string value = 2;
}

message RdfPrefixEntry {
  // 1-based
  uint32 id = 1;
  string value = 2;
}

message RdfDatatypeEntry {
  // 1-based
  uint32 id = 1;
  string value = 2;
}

message RdfStreamOptions {
  RdfStreamType stream_type = 1;
  // Whether the stream may contain generalized triples, quads, or datasets
  bool generalized_statements = 2;
  // Whether RdfRepeat will be used
  bool use_repeat = 3;
  // Prefix tables
  uint32 max_name_table_size = 9;
  uint32 max_prefix_table_size = 10;
  uint32 max_datatype_table_size = 11;
}

enum RdfStreamType {
  RDF_STREAM_TYPE_UNSPECIFIED = 0;
  RDF_STREAM_TYPE_TRIPLES = 1;
  RDF_STREAM_TYPE_QUADS = 2;
  RDF_STREAM_TYPE_GRAPHS = 3;
}

// === Streams ===
message RdfStreamRow {
  oneof row {
    RdfStreamOptions options = 1;
    // RDF triple statement.
    // Valid in TRIPLES and GRAPHS streams.
    RdfTriple triple = 2;
    // RDF quad statement.
    // Only valid in a QUADS stream.
    RdfQuad quad = 3;
    // Graph boundary: ends the currently transmitted graph and starts a new one
    // Only valid in a GRAPHS stream.
    RdfGraph graph_start = 4;
    // Explicit end of a graph.
    // Signals the consumer that the transmitted graph is complete.
    bool graph_end = 5;
    RdfNameEntry name = 9;
    RdfPrefixEntry prefix = 10;
    RdfDatatypeEntry datatype = 11;
  }
}

message RdfStreamFrame {
  repeated RdfStreamRow rows = 1;
}
